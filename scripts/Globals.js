// Generated by CoffeeScript 1.6.2
define(function() {
  var ret;

  ret = {
    gutter: 10,
    sqsize: 50,
    blank: -1,
    up: 0,
    u: 0,
    right: 1,
    r: 1,
    down: 2,
    d: 2,
    left: 3,
    l: 3,
    limit: 4,
    dur: 15,
    randomDir: function() {
      return ~~(Math.random() * g.limit);
    },
    _dirstrs: ["U", "R", "D", "L"],
    isHorizontal: function(dir) {
      return !!(dir % 2);
    },
    truedir: function(dir) {
      var mod;

      mod = dir % ret.limit;
      if (mod < 0) {
        return ret.limit + mod;
      }
      return mod;
    },
    dirstr: function(dir) {
      return ret._dirstrs[ret.truedir(dir)];
    },
    bound: function(n, min, max) {
      return Math.min(Math.max(n, min), max);
    },
    end: function(dn, n, low, high) {
      if (!dn) {
        return n;
      }
      if (dn > 0) {
        return high;
      }
      return low;
    },
    gridloc: function(n) {
      return n * (ret.sqsize + ret.gutter);
    },
    deg: function(dir) {
      return dir * 90;
    },
    next: function(dir) {
      return (dir + 1) % ret.limit;
    },
    prev: function(dir) {
      if (dir) {
        return dir - 1;
      } else {
        return ret.limit - 1;
      }
    },
    levelData: {
      1: {
        data: [[0], [3]]
      },
      2: {
        data: [[1], [0], [3], [3]]
      },
      3: {
        data: [[0, -1], [3, -1], [-1, 0], [2, -1]]
      },
      4: {
        data: [[-1, 0, -1, -1, -1], [2, -1, -1, -1, -1], [-1, 2, -1, -1, -1], [-1, 3, -1, -1, -1], [2, -1, -1, -1, -1], [-1, 0, -1, -1, -1]]
      },
      5: {
        data: [[2, -1, 1, -1, -1], [1, 0, 2, 3, -1], [0, -1, -1, -1, -1], [-1, 0, 1, 0, 0], [2, 3, 2, -1, -1]]
      },
      6: {
        data: [[2, -1, -1, 1, -1, -1], [-1, 0, -1, 1, 3, 1], [0, -1, 3, -1, 3, -1], [0, -1, 1, -1, 1, -1], [-1, 0, -1, 3, 1, 3], [2, -1, -1, 3, -1, -1]]
      },
      7: {
        data: [[1, -1, 3, 0, -1, 1], [2, 3, -1, -1, -1, 1], [-1, 0, -1, -1, 3, -1], [-1, -1, -1, -1, 3, -1]]
      },
      8: {
        data: [[-1, 2, -1, 2, -1], [-1, -1, -1, -1, -1], [-1, 1, 0, 1, 0], [-1, 1, -1, 1, -1], [3, 0, 3, -1, 3], [-1, 3, -1, 3, -1]]
      }
    }
  };
  return ret;
});
