// Generated by CoffeeScript 1.6.2
define(['Crafty', 'Square'], function(Crafty, Square) {
  var COLS, DOWN, GRIDLOC, GUTTER, Grid, HORIZ, LEFT, LIMIT, OFFSET, RIGHT, ROWS, SQSIZE, UP;

  OFFSET = 100;
  GUTTER = 10;
  SQSIZE = 50;
  COLS = 5;
  ROWS = 5;
  UP = 0;
  RIGHT = 1;
  DOWN = 2;
  LEFT = 3;
  LIMIT = 4;
  HORIZ = function(dir) {
    return !!(dir % 2);
  };
  GRIDLOC = function(n) {
    return n * (SQSIZE + GUTTER) + OFFSET;
  };
  Grid = (function() {
    function Grid() {
      var col, row, _i, _j, _ref, _ref1;

      this._grid = [];
      for (col = _i = 0, _ref = COLS - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; col = 0 <= _ref ? ++_i : --_i) {
        this._grid[col] = [];
        for (row = _j = 0, _ref1 = ROWS - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
          this.newSquareAt(col, row, true);
        }
      }
    }

    Grid.prototype.newSquareAt = function(x, y, preventMatching) {
      var e;

      e = Crafty.e(Square).shift(GRIDLOC(x), GRIDLOC(y));
      e.gridX = x;
      e.gridY = y;
      this._grid[x][y] = e;
      e.randomizeDirection();
      if (preventMatching) {
        while (this.matching(e)) {
          e.randomizeDirection();
        }
      }
      return e.bind('RotateEnd', this.checkConditions.bind(this));
    };

    Grid.prototype.getSquareAt = function(x, y) {
      var _ref;

      return (_ref = this._grid[x]) != null ? _ref[y] : void 0;
    };

    Grid.prototype.matching = function(e) {
      var checkDir, dir, gridX, gridY, matching, toCheck;

      dir = e.getDirection();
      gridX = e.gridX, gridY = e.gridY;
      switch (dir) {
        case UP:
          gridY -= 1;
          break;
        case DOWN:
          gridY += 1;
          break;
        case LEFT:
          gridX -= 1;
          break;
        case RIGHT:
          gridX += 1;
      }
      toCheck = this.getSquareAt(gridX, gridY);
      if (toCheck == null) {
        return;
      }
      checkDir = toCheck.getDirection();
      matching = (function() {
        switch (dir) {
          case UP:
            return checkDir === DOWN;
          case DOWN:
            return checkDir === UP;
          case LEFT:
            return checkDir === RIGHT;
          case RIGHT:
            return checkDir === LEFT;
        }
      })();
      if (matching) {
        return toCheck;
      }
    };

    Grid.prototype.checkConditions = function(e) {
      var toCheck;

      toCheck = this.matching(e);
      if (toCheck != null) {
        e.explode();
        return toCheck.explode();
      }
    };

    return Grid;

  })();
  return Grid;
});
