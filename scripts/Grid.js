// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['Globals', 'Crafty', 'Square'], function(g, Crafty, Square) {
  var Grid;

  Grid = (function() {
    function Grid(levelData) {
      this.removeAndReplace = __bind(this.removeAndReplace, this);
      this.checkConditions = __bind(this.checkConditions, this);      this._levelData = levelData;
      this._cols = levelData.length;
      this._colMax = this._cols - 1;
      this._rows = 1;
      this._rowMax = 0;
      this._grid = [];
      this._e = Crafty.e('2D, Canvas');
      this.establishGrid();
      this.center();
    }

    Grid.prototype.destroy = function() {
      return this._e.destroy();
    };

    Grid.prototype.establishGrid = function() {
      var col, row, rowlen, _i, _ref, _results;

      _results = [];
      for (col = _i = 0, _ref = this._colMax; 0 <= _ref ? _i <= _ref : _i >= _ref; col = 0 <= _ref ? ++_i : --_i) {
        this._grid[col] = [];
        rowlen = this._levelData[col].length;
        this._rowMax = (this._rows = Math.max(rowlen, this._rows)) - 1;
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (row = _j = 0, _ref1 = rowlen - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.newSquareAt(col, row, this._levelData[col][row]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Grid.prototype.newSquareAt = function(x, y, dir) {
      var e;

      if (!~dir) {
        return;
      }
      e = Crafty.e(Square);
      e.setDirection(dir);
      e.justInserted();
      this.setSquareAt(x, y, e, false);
      return this.bindEvents(e, 'bind');
    };

    Grid.prototype.bindEvents = function(e, method) {
      e[method]('RotateEnd', this.checkConditions);
      e[method]('InsertEnd', this.checkConditions);
      e[method]('MoveEnd', this.checkConditions);
      return e[method]('ExplodeEnd', this.removeAndReplace);
    };

    Grid.prototype.setSquareAt = function(x, y, e, animate) {
      this._grid[x][y] = e;
      if (!e) {
        return;
      }
      if ((e.gridX != null) && (e.gridY != null)) {
        this.nullOut(e);
      }
      e.setGridLocation(x, y, animate);
      return this._e.attach(e);
    };

    Grid.prototype.nullOut = function(e) {
      return this.setSquareAt(e.gridX, e.gridY, null);
    };

    Grid.prototype.getSquareAt = function(x, y) {
      var _ref;

      return (_ref = this._grid[x]) != null ? _ref[y] : void 0;
    };

    Grid.prototype.getWidth = function() {
      return g.gridloc(this._cols);
    };

    Grid.prototype.getHeight = function() {
      return g.gridloc(this._rows);
    };

    Grid.prototype.getEntity = function() {
      return this._e;
    };

    Grid.prototype.center = function() {
      var offsetX, offsetY, size, viewport;

      viewport = Crafty.viewport;
      size = Math.min(viewport.width, viewport.height);
      offsetX = (size - this.getWidth()) / 2;
      offsetY = (size - this.getHeight()) / 2;
      return this._e.shift(offsetX, offsetY);
    };

    Grid.prototype.matching = function(e) {
      var checkDir, dir, gridX, gridY, matching, toCheck;

      gridX = e.gridX, gridY = e.gridY;
      dir = e.getDirection();
      switch (dir) {
        case g.up:
          gridY -= 1;
          break;
        case g.down:
          gridY += 1;
          break;
        case g.left:
          gridX -= 1;
          break;
        case g.right:
          gridX += 1;
      }
      toCheck = this.getSquareAt(gridX, gridY);
      if (!(toCheck && !toCheck.hasExploded())) {
        return;
      }
      checkDir = toCheck.getDirection();
      matching = (function() {
        switch (dir) {
          case g.up:
            return checkDir === g.down;
          case g.down:
            return checkDir === g.up;
          case g.left:
            return checkDir === g.right;
          case g.right:
            return checkDir === g.left;
        }
      })();
      if (matching) {
        return toCheck;
      }
    };

    Grid.prototype.printGridState = function() {
      var col, row, sq, str, _i, _j, _ref, _ref1;

      for (row = _i = 0, _ref = this._rowMax; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
        str = '';
        for (col = _j = 0, _ref1 = this._colMax; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          sq = this.getSquareAt(col, row);
          if (sq != null) {
            if (sq.hasExploded()) {
              str += "*";
            } else {
              str += g.dirstr(sq.getDirection());
            }
          } else {
            str += "_";
          }
        }
        console.log(str);
      }
      return console.log(' ');
    };

    Grid.prototype.detonate = function(e) {
      return e.explode();
    };

    Grid.prototype.checkConditions = function(e) {
      var toCheck;

      if (e.hasExploded()) {
        return;
      }
      toCheck = this.matching(e);
      if (toCheck != null) {
        this.detonate(e);
        return this.detonate(toCheck);
      }
    };

    Grid.prototype.removeAndReplace = function(e) {
      var gridX, gridY;

      gridX = e.gridX, gridY = e.gridY;
      this.nullOut(e);
      e.destroy();
      switch (e.getDirection()) {
        case g.up:
          this.shiftStartingAt(gridX, gridY, 0, -1);
          break;
        case g.down:
          this.shiftStartingAt(gridX, gridY, 0, 1);
          break;
        case g.left:
          this.shiftStartingAt(gridX, gridY, -1, 0);
          break;
        case g.right:
          this.shiftStartingAt(gridX, gridY, 1, 0);
      }
    };

    Grid.prototype.runForGrid = function(callback) {
      var col, row, _i, _j, _ref, _ref1;

      for (col = _i = 0, _ref = this._colMax; 0 <= _ref ? _i <= _ref : _i >= _ref; col = 0 <= _ref ? ++_i : --_i) {
        for (row = _j = 0, _ref1 = this._rowMax; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; row = 0 <= _ref1 ? ++_j : --_j) {
          callback(col, row);
        }
      }
    };

    Grid.prototype.auditGrid = function() {
      var _this = this;

      return this.runForGrid(function(col, row) {
        var e;

        e = _this.getSquareAt(col, row);
        if (!e) {
          return;
        }
        if (g.gridloc(e.gridX) !== e.x || g.gridloc(e.gridY) !== e.y) {
          return e.color('pink');
        }
      });
    };

    Grid.prototype.ensureGrid = function() {
      var _this = this;

      return this.runForGrid(function(col, row) {
        if (!_this.getSquareAt(col, row)) {
          return _this.newSquareAt(col, row, false);
        }
      });
    };

    Grid.prototype.shiftStartingAt = function(x, y, dx, dy) {
      var col, endX, endY, row, sq, startX, startY, _i, _j;

      startX = x - dx;
      endX = g.end(-dx, startX, 0, this._colMax);
      startY = y - dy;
      endY = g.end(-dy, startY, 0, this._rowMax);
      for (col = _i = startX; startX <= endX ? _i <= endX : _i >= endX; col = startX <= endX ? ++_i : --_i) {
        for (row = _j = startY; startY <= endY ? _j <= endY : _j >= endY; row = startY <= endY ? ++_j : --_j) {
          sq = this.getSquareAt(col, row);
          if (sq != null) {
            this.moveWithinGrid(sq, dx, dy);
          }
        }
      }
    };

    Grid.prototype.moveWithinGrid = function(e, dx, dy) {
      var newX, newY;

      if (!((e != null) && !e.hasExploded())) {
        return;
      }
      newX = e.gridX + dx;
      newY = e.gridY + dy;
      if (!this.getSquareAt(newX, newY)) {
        return this.setSquareAt(newX, newY, e, true);
      }
    };

    return Grid;

  })();
  return Grid;
});
