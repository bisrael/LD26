// Generated by CoffeeScript 1.6.2
define(['Globals', 'Crafty', 'components/Highlighter', 'ColorScheme'], function(g, Crafty, Highlighter, Scheme) {
  var key;

  key = 'Square';
  Crafty.c(key, {
    init: function() {
      var size;

      this.dead = false;
      size = 50;
      this.requires("2D, Tween, Canvas, Color, Mouse, " + Highlighter);
      this.w = size;
      this.h = size;
      this.baseColor(Scheme.primary[0]);
      this.highColor(Scheme.primary[4]);
      this.origin("center");
      this.arrow = Crafty.e("2D, Canvas, Color, Tween, " + Highlighter);
      this.arrow.attr({
        w: 10,
        h: 10
      });
      this.arrow.origin(5, 25);
      this.arrow.shift(20, 0);
      this.arrow.baseColor(Scheme.secondary[0]);
      this.arrow.highColor(Scheme.secondary[4]);
      this.attach(this.arrow);
      this.rebind('MouseOver');
      this.rebind('MouseOut');
      this.rebind('MouseDown');
      return this.rebind('MouseUp');
    },
    rebind: function(event, callback) {
      this.unbind(event, callback || this[event]);
      return this.bind(event, callback || this[event]);
    },
    MouseOver: function() {
      return this.highlight(15);
    },
    MouseOut: function() {
      return this.unhighlight(15);
    },
    beginClick: function(button) {
      return this.clickBegan = true;
    },
    endClick: function() {
      return this.clickBegan = false;
    },
    MouseDown: function(e) {
      return this.beginClick();
    },
    MouseUp: function(e) {
      if (this.clickBegan) {
        this.Click(e);
      }
      return this.endClick();
    },
    Click: function(e) {
      var curr, next;

      if (this.dead) {
        return;
      }
      if (e.mouseButton === Crafty.mouseButtons.MIDDLE) {
        return this.trigger('MiddleClick', this);
      }
      curr = this.attr('sqdir');
      next = e.mouseButton === Crafty.mouseButtons.RIGHT ? curr - 1 : curr + 1;
      this.rebind('TweenEnd', this.RotateTweenEnd);
      return this.setDirection(next, true);
    },
    setGridLocation: function(x, y, animated) {
      var dx, dy;

      dx = g.gridloc(x - (this.gridX || 0));
      dy = g.gridloc(y - (this.gridY || 0));
      this.gridX = x;
      this.gridY = y;
      if (animated) {
        return this.moveTo(this.x + dx, this.y + dy);
      } else {
        return this.shift(dx, dy);
      }
    },
    moveTo: function(x, y) {
      this.rebind('TweenEnd', this.MoveTweenEnd);
      return this.tween({
        x: x,
        y: y
      }, g.dur);
    },
    MoveTweenEnd: function(e) {
      this.unbind('TweenEnd', this.MoveTweenEnd);
      return this.trigger('MoveEnd', this);
    },
    RotateTweenEnd: function(e) {
      this.unbind('TweenEnd', this.RotateTweenEnd);
      return this.trigger('RotateEnd', this);
    },
    randomizeDirection: function() {
      return this.setDirection(g.randomDir());
    },
    getDirection: function() {
      return g.truedir(this.attr('sqdir'));
    },
    setDirection: function(dir, animated) {
      this.attr('sqdir', dir);
      if (animated) {
        return this.tween({
          rotation: g.deg(dir)
        }, g.dur);
      } else {
        return this.rotation = g.deg(dir);
      }
    },
    justInserted: function() {
      this.attr('alpha', 0);
      this.rebind('TweenEnd', this.InsertTweenEnd);
      return this.tween({
        alpha: 1
      }, g.dur);
    },
    InsertTweenEnd: function() {
      this.unbind('TweenEnd', this.InsertTweenEnd);
      return this.trigger('InsertEnd', this);
    },
    explode: function() {
      this.dead = true;
      this.rebind('TweenEnd', this.ExplodeTweenEnd);
      this.tween({
        alpha: 0
      }, g.dur);
      return this.arrow.tween({
        alpha: 0
      }, g.dur);
    },
    hasExploded: function() {
      return !!this.dead;
    },
    ExplodeTweenEnd: function() {
      this.unbind('TweenEnd', this.ExplodeTweenEnd);
      return this.trigger('ExplodeEnd', this);
    }
  });
  return key;
});
