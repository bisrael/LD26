// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['Globals', 'Crafty', 'Grid', 'ColorScheme', 'components/Highlighter'], function(g, Crafty, Grid, Scheme, Highlighter) {
  var EditorGrid, blankGrid, key, stageInit, stageUninit;

  blankGrid = function(w, h) {
    var ret, x, y, _i, _ref, _results;

    ret = [];
    _results = [];
    for (x = _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      ret[x] = [];
      _results.push((function() {
        var _j, _ref1, _results1;

        _results1 = [];
        for (y = _j = 0, _ref1 = h - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(ret[x][y] = g.up);
        }
        return _results1;
      })());
    }
    return _results;
  };
  EditorGrid = (function(_super) {
    __extends(EditorGrid, _super);

    function EditorGrid() {
      this.editorRemove = __bind(this.editorRemove, this);
      this.resetState = __bind(this.resetState, this);
      this.printState = __bind(this.printState, this);
      this.saveState = __bind(this.saveState, this);
      this._stateCell = __bind(this._stateCell, this);
      this._stateCol = __bind(this._stateCol, this);      EditorGrid.__super__.constructor.call(this, blankGrid(4, 4));
      this.showEditorControls();
      this.saveState();
      this.printState();
    }

    EditorGrid.prototype.blank = function(w, h) {
      return this.newLevel(blankGrid(w, h));
    };

    EditorGrid.prototype._stateCol = function(col) {
      return this._state[col] = [];
    };

    EditorGrid.prototype._stateCell = function(col, row, e) {
      var dir;

      dir = e ? e.getDirection() : g.blank;
      return this._state[col][row] = dir;
    };

    EditorGrid.prototype.saveState = function() {
      this._state = [];
      this.runForGrid(this._stateCell, this._stateCol);
      return this.printState();
    };

    EditorGrid.prototype.getState = function() {
      return JSON.stringify(this._state);
    };

    EditorGrid.prototype.printState = function() {
      return console.log(this.getState());
    };

    EditorGrid.prototype.resetState = function() {
      return this.newLevel(this._state, false);
    };

    EditorGrid.prototype.bindEvents = function(e, method) {
      var opp;

      EditorGrid.__super__.bindEvents.apply(this, arguments);
      if (!e) {
        return;
      }
      opp = method === 'bind' ? 'unbind' : 'bind';
      return e[opp]('MiddleClick', this.editorRemove);
    };

    EditorGrid.prototype.editorRemove = function(e) {
      var colRemoved, rowRemoved;

      this.removeSquare(e);
      colRemoved = this.checkAndRemoveColIfBlank(e.gridX, true);
      rowRemoved = this.checkAndRemoveRowIfBlank(e.gridY, true);
      if (colRemoved || rowRemoved) {
        this.repositionAll(true);
        return this.recenter();
      }
    };

    EditorGrid.prototype.pauseEvents = function() {
      var _this = this;

      return this.runForGrid(function(col, row, e) {
        return _this.bindEvents(e, 'unbind');
      });
    };

    EditorGrid.prototype.unpauseEvents = function() {
      var _this = this;

      return this.runForGrid(function(col, row, e) {
        return _this.bindEvents(e, 'bind');
      });
    };

    EditorGrid.prototype.createText = function(o) {
      var e;

      e = Crafty.e("2D, Canvas, Text");
      if (o.textFont) {
        e.textFont(o.textFont);
      }
      if (o.textColor) {
        e.textColor(o.textColor);
      }
      if (o.text) {
        e.text(o.text);
      }
      return e;
    };

    EditorGrid.prototype.createButton = function(o, onClick) {
      var e, x, y;

      if (o == null) {
        o = {};
      }
      e = Crafty.e("2D, Mouse, Canvas, Color, " + Highlighter);
      if (o.w != null) {
        e.w = o.w;
      }
      if (o.h != null) {
        e.h = o.h;
      }
      x = (o.x || 0) + this.offsetX;
      y = (o.y || 0) + this.offsetY;
      e.shift(x, y);
      if (o.baseColor) {
        e.baseColor(o.baseColor);
      }
      if (o.highColor) {
        e.highColor(o.highColor);
      }
      if (o.baseColor || o.highColor) {
        e.bindHighlightMouseEvents();
      }
      if (onClick) {
        return e.bind('Click', onClick);
      }
    };

    EditorGrid.prototype.showEditorControls = function() {
      var black, darkred, grey, incx, o, paused, red, w,
        _this = this;

      w = 100;
      o = {
        x: (this.getWidth() - (4 * (w + g.gutter))) / 2,
        y: this.getHeight() + 10 * g.gutter,
        w: w,
        h: 20,
        baseColor: Scheme.tertiary[0],
        highColor: Scheme.tertiary[4]
      };
      incx = function() {
        return o.x += o.w + g.gutter;
      };
      this._eSave = this.createButton(o, this.saveState);
      incx();
      o.baseColor = Scheme.primary[0];
      o.highColor = Scheme.primary[4];
      this._ePrint = this.createButton(o, this.printState);
      incx();
      o.baseColor = Scheme.secondary[0];
      o.highColor = Scheme.secondary[4];
      this._eReset = this.createButton(o, this.resetState);
      incx();
      black = {
        r: 0,
        g: 0,
        b: 0
      };
      grey = {
        r: 200,
        g: 200,
        b: 200
      };
      darkred = {
        r: 102,
        g: 0,
        b: 0
      };
      red = {
        r: 230,
        g: 128,
        b: 128
      };
      o.baseColor = black;
      o.highColor = grey;
      paused = false;
      return this._ePause = this.createButton(o, function() {
        var e;

        e = _this._ePause;
        if (paused) {
          _this.unpauseEvents();
          e.rgb(grey);
          e.highColor(grey);
          e.baseColor(black);
        } else {
          _this.pauseEvents();
          e.rgb(red);
          e.highColor(red);
          e.baseColor(darkred);
        }
        return paused = !paused;
      });
    };

    return EditorGrid;

  })(Grid);
  window.editor = null;
  stageInit = function() {
    console.log('loading editor stage');
    return window.editor = new EditorGrid();
  };
  stageUninit = function() {
    console.log('unloading editor stage');
    window.editor.destroy();
    return window.editor = null;
  };
  key = 'Editor';
  Crafty.scene(key, stageInit, stageUninit);
  return key;
});
