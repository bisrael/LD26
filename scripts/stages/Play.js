// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['Globals', 'Crafty', 'Grid', 'ColorScheme', 'components/Highlighter', 'components/TweenColor'], function(g, Crafty, Grid, Scheme, Highlighter, TweenColor) {
  var Play, initScene, key, play, uninitScene;

  Play = (function() {
    function Play() {
      this.Victory = __bind(this.Victory, this);
      this.loadIntoGrid = __bind(this.loadIntoGrid, this);
      this.loadLevel = __bind(this.loadLevel, this);
      this.hideLevelNum = __bind(this.hideLevelNum, this);      this._level = 0;
      this._score = 0;
      this.createHud();
      this.advanceLevel();
    }

    Play.prototype.destroy = function() {
      this._hud.destroy();
      return this.grid.destroy();
    };

    Play.prototype.createHud = function() {
      this._boardSize = Math.min(Crafty.viewport.width, Crafty.viewport.height);
      this._hud = Crafty.e("2D, Canvas");
      this._hud.attr({
        w: Crafty.viewport.width,
        h: Crafty.viewport.height - this._boardSize
      });
      this.showLevelNum();
      this.showResetButton();
      return this._hud.shift(0, this._boardSize);
    };

    Play.prototype.reset = function() {
      this._level = 0;
      this._score = 0;
      return this.advanceLevel();
    };

    Play.prototype.advanceLevel = function() {
      this._level += 1;
      return this.loadLevel();
    };

    Play.prototype.showLevelNum = function() {
      var e, size;

      size = 50;
      e = Crafty.e('2D, Tween, Canvas, Text, Delay');
      this._hud.attach(e);
      e.attr({
        w: size,
        h: size,
        x: g.gutter,
        y: this._hud.h - 1.4 * size
      });
      e.textFont('size', "" + size + "px");
      e.textFont('weight', 400);
      e.textFont('lineHeight', "1.4");
      e.textFont('font', "'Roboto Condensed', 'RobotoCondensed'");
      e.text(this._level);
      return this._eLevel = e;
    };

    Play.prototype.showResetButton = function() {
      var e, s,
        _this = this;

      e = Crafty.e("2D, Tween, Canvas, " + Highlighter);
      this._hud.attach(e);
      s = g.sqsize;
      e.attr({
        w: s,
        h: s,
        x: this._hud.w - g.gutter - s,
        y: this._hud.h - g.gutter - s
      });
      e.baseColor(Scheme.secondary[0]);
      e.highColor(Scheme.secondary[4]);
      e.bindHighlightMouseEvents();
      return e.bind('Click', function() {
        if (!_this.level) {
          return _this.reset();
        } else if (_this.grid) {
          return _this.grid.newLevel(_this.level.data);
        }
      });
    };

    Play.prototype.hideLevelNum = function() {
      var e;

      e = this._eLevel;
      e.tween({
        alpha: 0
      }, 60);
      e.unbind('TweenEnd', this.hideLevelNum);
      return e.bind('TweenEnd', this.loadLevel);
    };

    Play.prototype.loadLevel = function() {
      this._eLevel.text("" + this._level + " : " + this._score);
      this.level = g.levelData[this._level];
      if (!this.level) {
        return this._eLevel.text("Final Score: " + this._score);
      } else {
        return this.loadIntoGrid();
      }
    };

    Play.prototype.loadIntoGrid = function() {
      return this.ensureGrid(this.level.data);
    };

    Play.prototype.ensureGrid = function(data) {
      if (this.grid) {
        this.grid.destroy();
      }
      this.grid = new Grid(data);
      return this.grid.bind('Victory', this.Victory);
    };

    Play.prototype.Victory = function(grid) {
      var actions;

      actions = this.grid.actions;
      if (actions <= this.level.gold) {
        this._score += 3;
      } else if (actions <= this.level.silver) {
        this._score += 2;
      } else {
        this._score += 1;
      }
      this.grid.destroy();
      return this.advanceLevel();
    };

    return Play;

  })();
  play = null;
  initScene = function() {
    return play = new Play();
  };
  uninitScene = function() {
    play.destroy();
    return play = null;
  };
  key = "Play";
  Crafty.scene(key, initScene, uninitScene);
  return key;
});
